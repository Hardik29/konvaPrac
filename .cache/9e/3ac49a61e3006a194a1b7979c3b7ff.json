{"id":"node_modules/konva/lib/shapes/Line.js","dependencies":[{"name":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\package.json","includedInParent":true,"mtime":1617850830012},{"name":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\package.json","includedInParent":true,"mtime":1617850829950},{"name":"../Util","loc":{"line":24,"column":21},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Line.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Util.js"},{"name":"../Factory","loc":{"line":25,"column":24},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Line.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Factory.js"},{"name":"../Shape","loc":{"line":26,"column":22},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Line.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Shape.js"},{"name":"../Validators","loc":{"line":27,"column":27},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Line.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Validators.js"},{"name":"../Global","loc":{"line":28,"column":23},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Line.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Global.js"}],"generated":{"js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Line = void 0;\r\nvar Util_1 = require(\"../Util\");\r\nvar Factory_1 = require(\"../Factory\");\r\nvar Shape_1 = require(\"../Shape\");\r\nvar Validators_1 = require(\"../Validators\");\r\nvar Global_1 = require(\"../Global\");\r\nvar Line = (function (_super) {\r\n    __extends(Line, _super);\r\n    function Line(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.on('pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva', function () {\r\n            this._clearCache('tensionPoints');\r\n        });\r\n        return _this;\r\n    }\r\n    Line.prototype._sceneFunc = function (context) {\r\n        var points = this.points(), length = points.length, tension = this.tension(), closed = this.closed(), bezier = this.bezier(), tp, len, n;\r\n        if (!length) {\r\n            return;\r\n        }\r\n        context.beginPath();\r\n        context.moveTo(points[0], points[1]);\r\n        if (tension !== 0 && length > 4) {\r\n            tp = this.getTensionPoints();\r\n            len = tp.length;\r\n            n = closed ? 0 : 4;\r\n            if (!closed) {\r\n                context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);\r\n            }\r\n            while (n < len - 2) {\r\n                context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);\r\n            }\r\n            if (!closed) {\r\n                context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);\r\n            }\r\n        }\r\n        else if (bezier) {\r\n            n = 2;\r\n            while (n < length) {\r\n                context.bezierCurveTo(points[n++], points[n++], points[n++], points[n++], points[n++], points[n++]);\r\n            }\r\n        }\r\n        else {\r\n            for (n = 2; n < length; n += 2) {\r\n                context.lineTo(points[n], points[n + 1]);\r\n            }\r\n        }\r\n        if (closed) {\r\n            context.closePath();\r\n            context.fillStrokeShape(this);\r\n        }\r\n        else {\r\n            context.strokeShape(this);\r\n        }\r\n    };\r\n    Line.prototype.getTensionPoints = function () {\r\n        return this._getCache('tensionPoints', this._getTensionPoints);\r\n    };\r\n    Line.prototype._getTensionPoints = function () {\r\n        if (this.closed()) {\r\n            return this._getTensionPointsClosed();\r\n        }\r\n        else {\r\n            return Util_1.Util._expandPoints(this.points(), this.tension());\r\n        }\r\n    };\r\n    Line.prototype._getTensionPointsClosed = function () {\r\n        var p = this.points(), len = p.length, tension = this.tension(), firstControlPoints = Util_1.Util._getControlPoints(p[len - 2], p[len - 1], p[0], p[1], p[2], p[3], tension), lastControlPoints = Util_1.Util._getControlPoints(p[len - 4], p[len - 3], p[len - 2], p[len - 1], p[0], p[1], tension), middle = Util_1.Util._expandPoints(p, tension), tp = [firstControlPoints[2], firstControlPoints[3]]\r\n            .concat(middle)\r\n            .concat([\r\n            lastControlPoints[0],\r\n            lastControlPoints[1],\r\n            p[len - 2],\r\n            p[len - 1],\r\n            lastControlPoints[2],\r\n            lastControlPoints[3],\r\n            firstControlPoints[0],\r\n            firstControlPoints[1],\r\n            p[0],\r\n            p[1]\r\n        ]);\r\n        return tp;\r\n    };\r\n    Line.prototype.getWidth = function () {\r\n        return this.getSelfRect().width;\r\n    };\r\n    Line.prototype.getHeight = function () {\r\n        return this.getSelfRect().height;\r\n    };\r\n    Line.prototype.getSelfRect = function () {\r\n        var points = this.points();\r\n        if (points.length < 4) {\r\n            return {\r\n                x: points[0] || 0,\r\n                y: points[1] || 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n        if (this.tension() !== 0) {\r\n            points = __spreadArrays([\r\n                points[0],\r\n                points[1]\r\n            ], this._getTensionPoints(), [\r\n                points[points.length - 2],\r\n                points[points.length - 1]\r\n            ]);\r\n        }\r\n        else {\r\n            points = this.points();\r\n        }\r\n        var minX = points[0];\r\n        var maxX = points[0];\r\n        var minY = points[1];\r\n        var maxY = points[1];\r\n        var x, y;\r\n        for (var i = 0; i < points.length / 2; i++) {\r\n            x = points[i * 2];\r\n            y = points[i * 2 + 1];\r\n            minX = Math.min(minX, x);\r\n            maxX = Math.max(maxX, x);\r\n            minY = Math.min(minY, y);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        return {\r\n            x: minX,\r\n            y: minY,\r\n            width: maxX - minX,\r\n            height: maxY - minY\r\n        };\r\n    };\r\n    return Line;\r\n}(Shape_1.Shape));\r\nexports.Line = Line;\r\nLine.prototype.className = 'Line';\r\nLine.prototype._attrsAffectingSize = ['points', 'bezier', 'tension'];\r\nGlobal_1._registerNode(Line);\r\nFactory_1.Factory.addGetterSetter(Line, 'closed', false);\r\nFactory_1.Factory.addGetterSetter(Line, 'bezier', false);\r\nFactory_1.Factory.addGetterSetter(Line, 'tension', 0, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Line, 'points', [], Validators_1.getNumberArrayValidator());\r\nUtil_1.Collection.mapMethods(Line);\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/konva/lib/shapes/Line.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}}],"sources":{"node_modules/konva/lib/shapes/Line.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Line = void 0;\r\nvar Util_1 = require(\"../Util\");\r\nvar Factory_1 = require(\"../Factory\");\r\nvar Shape_1 = require(\"../Shape\");\r\nvar Validators_1 = require(\"../Validators\");\r\nvar Global_1 = require(\"../Global\");\r\nvar Line = (function (_super) {\r\n    __extends(Line, _super);\r\n    function Line(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.on('pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva', function () {\r\n            this._clearCache('tensionPoints');\r\n        });\r\n        return _this;\r\n    }\r\n    Line.prototype._sceneFunc = function (context) {\r\n        var points = this.points(), length = points.length, tension = this.tension(), closed = this.closed(), bezier = this.bezier(), tp, len, n;\r\n        if (!length) {\r\n            return;\r\n        }\r\n        context.beginPath();\r\n        context.moveTo(points[0], points[1]);\r\n        if (tension !== 0 && length > 4) {\r\n            tp = this.getTensionPoints();\r\n            len = tp.length;\r\n            n = closed ? 0 : 4;\r\n            if (!closed) {\r\n                context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);\r\n            }\r\n            while (n < len - 2) {\r\n                context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);\r\n            }\r\n            if (!closed) {\r\n                context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);\r\n            }\r\n        }\r\n        else if (bezier) {\r\n            n = 2;\r\n            while (n < length) {\r\n                context.bezierCurveTo(points[n++], points[n++], points[n++], points[n++], points[n++], points[n++]);\r\n            }\r\n        }\r\n        else {\r\n            for (n = 2; n < length; n += 2) {\r\n                context.lineTo(points[n], points[n + 1]);\r\n            }\r\n        }\r\n        if (closed) {\r\n            context.closePath();\r\n            context.fillStrokeShape(this);\r\n        }\r\n        else {\r\n            context.strokeShape(this);\r\n        }\r\n    };\r\n    Line.prototype.getTensionPoints = function () {\r\n        return this._getCache('tensionPoints', this._getTensionPoints);\r\n    };\r\n    Line.prototype._getTensionPoints = function () {\r\n        if (this.closed()) {\r\n            return this._getTensionPointsClosed();\r\n        }\r\n        else {\r\n            return Util_1.Util._expandPoints(this.points(), this.tension());\r\n        }\r\n    };\r\n    Line.prototype._getTensionPointsClosed = function () {\r\n        var p = this.points(), len = p.length, tension = this.tension(), firstControlPoints = Util_1.Util._getControlPoints(p[len - 2], p[len - 1], p[0], p[1], p[2], p[3], tension), lastControlPoints = Util_1.Util._getControlPoints(p[len - 4], p[len - 3], p[len - 2], p[len - 1], p[0], p[1], tension), middle = Util_1.Util._expandPoints(p, tension), tp = [firstControlPoints[2], firstControlPoints[3]]\r\n            .concat(middle)\r\n            .concat([\r\n            lastControlPoints[0],\r\n            lastControlPoints[1],\r\n            p[len - 2],\r\n            p[len - 1],\r\n            lastControlPoints[2],\r\n            lastControlPoints[3],\r\n            firstControlPoints[0],\r\n            firstControlPoints[1],\r\n            p[0],\r\n            p[1]\r\n        ]);\r\n        return tp;\r\n    };\r\n    Line.prototype.getWidth = function () {\r\n        return this.getSelfRect().width;\r\n    };\r\n    Line.prototype.getHeight = function () {\r\n        return this.getSelfRect().height;\r\n    };\r\n    Line.prototype.getSelfRect = function () {\r\n        var points = this.points();\r\n        if (points.length < 4) {\r\n            return {\r\n                x: points[0] || 0,\r\n                y: points[1] || 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n        if (this.tension() !== 0) {\r\n            points = __spreadArrays([\r\n                points[0],\r\n                points[1]\r\n            ], this._getTensionPoints(), [\r\n                points[points.length - 2],\r\n                points[points.length - 1]\r\n            ]);\r\n        }\r\n        else {\r\n            points = this.points();\r\n        }\r\n        var minX = points[0];\r\n        var maxX = points[0];\r\n        var minY = points[1];\r\n        var maxY = points[1];\r\n        var x, y;\r\n        for (var i = 0; i < points.length / 2; i++) {\r\n            x = points[i * 2];\r\n            y = points[i * 2 + 1];\r\n            minX = Math.min(minX, x);\r\n            maxX = Math.max(maxX, x);\r\n            minY = Math.min(minY, y);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        return {\r\n            x: minX,\r\n            y: minY,\r\n            width: maxX - minX,\r\n            height: maxY - minY\r\n        };\r\n    };\r\n    return Line;\r\n}(Shape_1.Shape));\r\nexports.Line = Line;\r\nLine.prototype.className = 'Line';\r\nLine.prototype._attrsAffectingSize = ['points', 'bezier', 'tension'];\r\nGlobal_1._registerNode(Line);\r\nFactory_1.Factory.addGetterSetter(Line, 'closed', false);\r\nFactory_1.Factory.addGetterSetter(Line, 'bezier', false);\r\nFactory_1.Factory.addGetterSetter(Line, 'tension', 0, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Line, 'points', [], Validators_1.getNumberArrayValidator());\r\nUtil_1.Collection.mapMethods(Line);\r\n"},"lineCount":165}},"error":null,"hash":"0b42fc8ab0d5cea7db7d9482ecfd6eb2","cacheData":{"env":{}}}