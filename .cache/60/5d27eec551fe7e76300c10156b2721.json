{"id":"node_modules/konva/lib/shapes/TextPath.js","dependencies":[{"name":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\package.json","includedInParent":true,"mtime":1617850830012},{"name":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\package.json","includedInParent":true,"mtime":1617850829950},{"name":"../Util","loc":{"line":17,"column":21},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\TextPath.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Util.js"},{"name":"../Factory","loc":{"line":18,"column":24},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\TextPath.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Factory.js"},{"name":"../Shape","loc":{"line":19,"column":22},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\TextPath.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Shape.js"},{"name":"./Path","loc":{"line":20,"column":21},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\TextPath.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Path.js"},{"name":"./Text","loc":{"line":21,"column":21},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\TextPath.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Text.js"},{"name":"../Validators","loc":{"line":22,"column":27},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\TextPath.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Validators.js"},{"name":"../Global","loc":{"line":23,"column":23},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\TextPath.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Global.js"}],"generated":{"js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextPath = void 0;\r\nvar Util_1 = require(\"../Util\");\r\nvar Factory_1 = require(\"../Factory\");\r\nvar Shape_1 = require(\"../Shape\");\r\nvar Path_1 = require(\"./Path\");\r\nvar Text_1 = require(\"./Text\");\r\nvar Validators_1 = require(\"../Validators\");\r\nvar Global_1 = require(\"../Global\");\r\nvar EMPTY_STRING = '', NORMAL = 'normal';\r\nfunction _fillFunc(context) {\r\n    context.fillText(this.partialText, 0, 0);\r\n}\r\nfunction _strokeFunc(context) {\r\n    context.strokeText(this.partialText, 0, 0);\r\n}\r\nvar TextPath = (function (_super) {\r\n    __extends(TextPath, _super);\r\n    function TextPath(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.dummyCanvas = Util_1.Util.createCanvasElement();\r\n        _this.dataArray = [];\r\n        _this.dataArray = Path_1.Path.parsePathData(_this.attrs.data);\r\n        _this.on('dataChange.konva', function () {\r\n            this.dataArray = Path_1.Path.parsePathData(this.attrs.data);\r\n            this._setTextData();\r\n        });\r\n        _this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva', _this._setTextData);\r\n        if (config && config['getKerning']) {\r\n            Util_1.Util.warn('getKerning TextPath API is deprecated. Please use \"kerningFunc\" instead.');\r\n            _this.kerningFunc(config['getKerning']);\r\n        }\r\n        _this._setTextData();\r\n        return _this;\r\n    }\r\n    TextPath.prototype._sceneFunc = function (context) {\r\n        context.setAttr('font', this._getContextFont());\r\n        context.setAttr('textBaseline', this.textBaseline());\r\n        context.setAttr('textAlign', 'left');\r\n        context.save();\r\n        var textDecoration = this.textDecoration();\r\n        var fill = this.fill();\r\n        var fontSize = this.fontSize();\r\n        var glyphInfo = this.glyphInfo;\r\n        if (textDecoration === 'underline') {\r\n            context.beginPath();\r\n        }\r\n        for (var i = 0; i < glyphInfo.length; i++) {\r\n            context.save();\r\n            var p0 = glyphInfo[i].p0;\r\n            context.translate(p0.x, p0.y);\r\n            context.rotate(glyphInfo[i].rotation);\r\n            this.partialText = glyphInfo[i].text;\r\n            context.fillStrokeShape(this);\r\n            if (textDecoration === 'underline') {\r\n                if (i === 0) {\r\n                    context.moveTo(0, fontSize / 2 + 1);\r\n                }\r\n                context.lineTo(fontSize, fontSize / 2 + 1);\r\n            }\r\n            context.restore();\r\n        }\r\n        if (textDecoration === 'underline') {\r\n            context.strokeStyle = fill;\r\n            context.lineWidth = fontSize / 20;\r\n            context.stroke();\r\n        }\r\n        context.restore();\r\n    };\r\n    TextPath.prototype._hitFunc = function (context) {\r\n        context.beginPath();\r\n        var glyphInfo = this.glyphInfo;\r\n        if (glyphInfo.length >= 1) {\r\n            var p0 = glyphInfo[0].p0;\r\n            context.moveTo(p0.x, p0.y);\r\n        }\r\n        for (var i = 0; i < glyphInfo.length; i++) {\r\n            var p1 = glyphInfo[i].p1;\r\n            context.lineTo(p1.x, p1.y);\r\n        }\r\n        context.setAttr('lineWidth', this.fontSize());\r\n        context.setAttr('strokeStyle', this.colorKey);\r\n        context.stroke();\r\n    };\r\n    TextPath.prototype.getTextWidth = function () {\r\n        return this.textWidth;\r\n    };\r\n    TextPath.prototype.getTextHeight = function () {\r\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\r\n        return this.textHeight;\r\n    };\r\n    TextPath.prototype.setText = function (text) {\r\n        return Text_1.Text.prototype.setText.call(this, text);\r\n    };\r\n    TextPath.prototype._getContextFont = function () {\r\n        return Text_1.Text.prototype._getContextFont.call(this);\r\n    };\r\n    TextPath.prototype._getTextSize = function (text) {\r\n        var dummyCanvas = this.dummyCanvas;\r\n        var _context = dummyCanvas.getContext('2d');\r\n        _context.save();\r\n        _context.font = this._getContextFont();\r\n        var metrics = _context.measureText(text);\r\n        _context.restore();\r\n        return {\r\n            width: metrics.width,\r\n            height: parseInt(this.attrs.fontSize, 10),\r\n        };\r\n    };\r\n    TextPath.prototype._setTextData = function () {\r\n        var that = this;\r\n        var size = this._getTextSize(this.attrs.text);\r\n        var letterSpacing = this.letterSpacing();\r\n        var align = this.align();\r\n        var kerningFunc = this.kerningFunc();\r\n        this.textWidth = size.width;\r\n        this.textHeight = size.height;\r\n        var textFullWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\r\n        this.glyphInfo = [];\r\n        var fullPathWidth = 0;\r\n        for (var l = 0; l < that.dataArray.length; l++) {\r\n            if (that.dataArray[l].pathLength > 0) {\r\n                fullPathWidth += that.dataArray[l].pathLength;\r\n            }\r\n        }\r\n        var offset = 0;\r\n        if (align === 'center') {\r\n            offset = Math.max(0, fullPathWidth / 2 - textFullWidth / 2);\r\n        }\r\n        if (align === 'right') {\r\n            offset = Math.max(0, fullPathWidth - textFullWidth);\r\n        }\r\n        var charArr = Text_1.stringToArray(this.text());\r\n        var spacesNumber = this.text().split(' ').length - 1;\r\n        var p0, p1, pathCmd;\r\n        var pIndex = -1;\r\n        var currentT = 0;\r\n        var getNextPathSegment = function () {\r\n            currentT = 0;\r\n            var pathData = that.dataArray;\r\n            for (var j = pIndex + 1; j < pathData.length; j++) {\r\n                if (pathData[j].pathLength > 0) {\r\n                    pIndex = j;\r\n                    return pathData[j];\r\n                }\r\n                else if (pathData[j].command === 'M') {\r\n                    p0 = {\r\n                        x: pathData[j].points[0],\r\n                        y: pathData[j].points[1],\r\n                    };\r\n                }\r\n            }\r\n            return {};\r\n        };\r\n        var findSegmentToFitCharacter = function (c) {\r\n            var glyphWidth = that._getTextSize(c).width + letterSpacing;\r\n            if (c === ' ' && align === 'justify') {\r\n                glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;\r\n            }\r\n            var currLen = 0;\r\n            var attempts = 0;\r\n            p1 = undefined;\r\n            while (Math.abs(glyphWidth - currLen) / glyphWidth > 0.01 &&\r\n                attempts < 20) {\r\n                attempts++;\r\n                var cumulativePathLength = currLen;\r\n                while (pathCmd === undefined) {\r\n                    pathCmd = getNextPathSegment();\r\n                    if (pathCmd &&\r\n                        cumulativePathLength + pathCmd.pathLength < glyphWidth) {\r\n                        cumulativePathLength += pathCmd.pathLength;\r\n                        pathCmd = undefined;\r\n                    }\r\n                }\r\n                if (pathCmd === {} || p0 === undefined) {\r\n                    return undefined;\r\n                }\r\n                var needNewSegment = false;\r\n                switch (pathCmd.command) {\r\n                    case 'L':\r\n                        if (Path_1.Path.getLineLength(p0.x, p0.y, pathCmd.points[0], pathCmd.points[1]) > glyphWidth) {\r\n                            p1 = Path_1.Path.getPointOnLine(glyphWidth, p0.x, p0.y, pathCmd.points[0], pathCmd.points[1], p0.x, p0.y);\r\n                        }\r\n                        else {\r\n                            pathCmd = undefined;\r\n                        }\r\n                        break;\r\n                    case 'A':\r\n                        var start = pathCmd.points[4];\r\n                        var dTheta = pathCmd.points[5];\r\n                        var end = pathCmd.points[4] + dTheta;\r\n                        if (currentT === 0) {\r\n                            currentT = start + 0.00000001;\r\n                        }\r\n                        else if (glyphWidth > currLen) {\r\n                            currentT += ((Math.PI / 180.0) * dTheta) / Math.abs(dTheta);\r\n                        }\r\n                        else {\r\n                            currentT -= ((Math.PI / 360.0) * dTheta) / Math.abs(dTheta);\r\n                        }\r\n                        if ((dTheta < 0 && currentT < end) ||\r\n                            (dTheta >= 0 && currentT > end)) {\r\n                            currentT = end;\r\n                            needNewSegment = true;\r\n                        }\r\n                        p1 = Path_1.Path.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);\r\n                        break;\r\n                    case 'C':\r\n                        if (currentT === 0) {\r\n                            if (glyphWidth > pathCmd.pathLength) {\r\n                                currentT = 0.00000001;\r\n                            }\r\n                            else {\r\n                                currentT = glyphWidth / pathCmd.pathLength;\r\n                            }\r\n                        }\r\n                        else if (glyphWidth > currLen) {\r\n                            currentT += (glyphWidth - currLen) / pathCmd.pathLength / 2;\r\n                        }\r\n                        else {\r\n                            currentT = Math.max(currentT - (currLen - glyphWidth) / pathCmd.pathLength / 2, 0);\r\n                        }\r\n                        if (currentT > 1.0) {\r\n                            currentT = 1.0;\r\n                            needNewSegment = true;\r\n                        }\r\n                        p1 = Path_1.Path.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);\r\n                        break;\r\n                    case 'Q':\r\n                        if (currentT === 0) {\r\n                            currentT = glyphWidth / pathCmd.pathLength;\r\n                        }\r\n                        else if (glyphWidth > currLen) {\r\n                            currentT += (glyphWidth - currLen) / pathCmd.pathLength;\r\n                        }\r\n                        else {\r\n                            currentT -= (currLen - glyphWidth) / pathCmd.pathLength;\r\n                        }\r\n                        if (currentT > 1.0) {\r\n                            currentT = 1.0;\r\n                            needNewSegment = true;\r\n                        }\r\n                        p1 = Path_1.Path.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);\r\n                        break;\r\n                }\r\n                if (p1 !== undefined) {\r\n                    currLen = Path_1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);\r\n                }\r\n                if (needNewSegment) {\r\n                    needNewSegment = false;\r\n                    pathCmd = undefined;\r\n                }\r\n            }\r\n        };\r\n        var testChar = 'C';\r\n        var glyphWidth = that._getTextSize(testChar).width + letterSpacing;\r\n        var lettersInOffset = offset / glyphWidth - 1;\r\n        for (var k = 0; k < lettersInOffset; k++) {\r\n            findSegmentToFitCharacter(testChar);\r\n            if (p0 === undefined || p1 === undefined) {\r\n                break;\r\n            }\r\n            p0 = p1;\r\n        }\r\n        for (var i = 0; i < charArr.length; i++) {\r\n            findSegmentToFitCharacter(charArr[i]);\r\n            if (p0 === undefined || p1 === undefined) {\r\n                break;\r\n            }\r\n            var width = Path_1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);\r\n            var kern = 0;\r\n            if (kerningFunc) {\r\n                try {\r\n                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\r\n                }\r\n                catch (e) {\r\n                    kern = 0;\r\n                }\r\n            }\r\n            p0.x += kern;\r\n            p1.x += kern;\r\n            this.textWidth += kern;\r\n            var midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, p0.x, p0.y, p1.x, p1.y);\r\n            var rotation = Math.atan2(p1.y - p0.y, p1.x - p0.x);\r\n            this.glyphInfo.push({\r\n                transposeX: midpoint.x,\r\n                transposeY: midpoint.y,\r\n                text: charArr[i],\r\n                rotation: rotation,\r\n                p0: p0,\r\n                p1: p1,\r\n            });\r\n            p0 = p1;\r\n        }\r\n    };\r\n    TextPath.prototype.getSelfRect = function () {\r\n        if (!this.glyphInfo.length) {\r\n            return {\r\n                x: 0,\r\n                y: 0,\r\n                width: 0,\r\n                height: 0,\r\n            };\r\n        }\r\n        var points = [];\r\n        this.glyphInfo.forEach(function (info) {\r\n            points.push(info.p0.x);\r\n            points.push(info.p0.y);\r\n            points.push(info.p1.x);\r\n            points.push(info.p1.y);\r\n        });\r\n        var minX = points[0] || 0;\r\n        var maxX = points[0] || 0;\r\n        var minY = points[1] || 0;\r\n        var maxY = points[1] || 0;\r\n        var x, y;\r\n        for (var i = 0; i < points.length / 2; i++) {\r\n            x = points[i * 2];\r\n            y = points[i * 2 + 1];\r\n            minX = Math.min(minX, x);\r\n            maxX = Math.max(maxX, x);\r\n            minY = Math.min(minY, y);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        var fontSize = this.fontSize();\r\n        return {\r\n            x: minX - fontSize / 2,\r\n            y: minY - fontSize / 2,\r\n            width: maxX - minX + fontSize,\r\n            height: maxY - minY + fontSize,\r\n        };\r\n    };\r\n    return TextPath;\r\n}(Shape_1.Shape));\r\nexports.TextPath = TextPath;\r\nTextPath.prototype._fillFunc = _fillFunc;\r\nTextPath.prototype._strokeFunc = _strokeFunc;\r\nTextPath.prototype._fillFuncHit = _fillFunc;\r\nTextPath.prototype._strokeFuncHit = _strokeFunc;\r\nTextPath.prototype.className = 'TextPath';\r\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\r\nGlobal_1._registerNode(TextPath);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'data');\r\nFactory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\r\nFactory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'align', 'left');\r\nFactory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');\r\nFactory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);\r\nUtil_1.Collection.mapMethods(TextPath);\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/konva/lib/shapes/TextPath.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}}],"sources":{"node_modules/konva/lib/shapes/TextPath.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextPath = void 0;\r\nvar Util_1 = require(\"../Util\");\r\nvar Factory_1 = require(\"../Factory\");\r\nvar Shape_1 = require(\"../Shape\");\r\nvar Path_1 = require(\"./Path\");\r\nvar Text_1 = require(\"./Text\");\r\nvar Validators_1 = require(\"../Validators\");\r\nvar Global_1 = require(\"../Global\");\r\nvar EMPTY_STRING = '', NORMAL = 'normal';\r\nfunction _fillFunc(context) {\r\n    context.fillText(this.partialText, 0, 0);\r\n}\r\nfunction _strokeFunc(context) {\r\n    context.strokeText(this.partialText, 0, 0);\r\n}\r\nvar TextPath = (function (_super) {\r\n    __extends(TextPath, _super);\r\n    function TextPath(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.dummyCanvas = Util_1.Util.createCanvasElement();\r\n        _this.dataArray = [];\r\n        _this.dataArray = Path_1.Path.parsePathData(_this.attrs.data);\r\n        _this.on('dataChange.konva', function () {\r\n            this.dataArray = Path_1.Path.parsePathData(this.attrs.data);\r\n            this._setTextData();\r\n        });\r\n        _this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva', _this._setTextData);\r\n        if (config && config['getKerning']) {\r\n            Util_1.Util.warn('getKerning TextPath API is deprecated. Please use \"kerningFunc\" instead.');\r\n            _this.kerningFunc(config['getKerning']);\r\n        }\r\n        _this._setTextData();\r\n        return _this;\r\n    }\r\n    TextPath.prototype._sceneFunc = function (context) {\r\n        context.setAttr('font', this._getContextFont());\r\n        context.setAttr('textBaseline', this.textBaseline());\r\n        context.setAttr('textAlign', 'left');\r\n        context.save();\r\n        var textDecoration = this.textDecoration();\r\n        var fill = this.fill();\r\n        var fontSize = this.fontSize();\r\n        var glyphInfo = this.glyphInfo;\r\n        if (textDecoration === 'underline') {\r\n            context.beginPath();\r\n        }\r\n        for (var i = 0; i < glyphInfo.length; i++) {\r\n            context.save();\r\n            var p0 = glyphInfo[i].p0;\r\n            context.translate(p0.x, p0.y);\r\n            context.rotate(glyphInfo[i].rotation);\r\n            this.partialText = glyphInfo[i].text;\r\n            context.fillStrokeShape(this);\r\n            if (textDecoration === 'underline') {\r\n                if (i === 0) {\r\n                    context.moveTo(0, fontSize / 2 + 1);\r\n                }\r\n                context.lineTo(fontSize, fontSize / 2 + 1);\r\n            }\r\n            context.restore();\r\n        }\r\n        if (textDecoration === 'underline') {\r\n            context.strokeStyle = fill;\r\n            context.lineWidth = fontSize / 20;\r\n            context.stroke();\r\n        }\r\n        context.restore();\r\n    };\r\n    TextPath.prototype._hitFunc = function (context) {\r\n        context.beginPath();\r\n        var glyphInfo = this.glyphInfo;\r\n        if (glyphInfo.length >= 1) {\r\n            var p0 = glyphInfo[0].p0;\r\n            context.moveTo(p0.x, p0.y);\r\n        }\r\n        for (var i = 0; i < glyphInfo.length; i++) {\r\n            var p1 = glyphInfo[i].p1;\r\n            context.lineTo(p1.x, p1.y);\r\n        }\r\n        context.setAttr('lineWidth', this.fontSize());\r\n        context.setAttr('strokeStyle', this.colorKey);\r\n        context.stroke();\r\n    };\r\n    TextPath.prototype.getTextWidth = function () {\r\n        return this.textWidth;\r\n    };\r\n    TextPath.prototype.getTextHeight = function () {\r\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\r\n        return this.textHeight;\r\n    };\r\n    TextPath.prototype.setText = function (text) {\r\n        return Text_1.Text.prototype.setText.call(this, text);\r\n    };\r\n    TextPath.prototype._getContextFont = function () {\r\n        return Text_1.Text.prototype._getContextFont.call(this);\r\n    };\r\n    TextPath.prototype._getTextSize = function (text) {\r\n        var dummyCanvas = this.dummyCanvas;\r\n        var _context = dummyCanvas.getContext('2d');\r\n        _context.save();\r\n        _context.font = this._getContextFont();\r\n        var metrics = _context.measureText(text);\r\n        _context.restore();\r\n        return {\r\n            width: metrics.width,\r\n            height: parseInt(this.attrs.fontSize, 10),\r\n        };\r\n    };\r\n    TextPath.prototype._setTextData = function () {\r\n        var that = this;\r\n        var size = this._getTextSize(this.attrs.text);\r\n        var letterSpacing = this.letterSpacing();\r\n        var align = this.align();\r\n        var kerningFunc = this.kerningFunc();\r\n        this.textWidth = size.width;\r\n        this.textHeight = size.height;\r\n        var textFullWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\r\n        this.glyphInfo = [];\r\n        var fullPathWidth = 0;\r\n        for (var l = 0; l < that.dataArray.length; l++) {\r\n            if (that.dataArray[l].pathLength > 0) {\r\n                fullPathWidth += that.dataArray[l].pathLength;\r\n            }\r\n        }\r\n        var offset = 0;\r\n        if (align === 'center') {\r\n            offset = Math.max(0, fullPathWidth / 2 - textFullWidth / 2);\r\n        }\r\n        if (align === 'right') {\r\n            offset = Math.max(0, fullPathWidth - textFullWidth);\r\n        }\r\n        var charArr = Text_1.stringToArray(this.text());\r\n        var spacesNumber = this.text().split(' ').length - 1;\r\n        var p0, p1, pathCmd;\r\n        var pIndex = -1;\r\n        var currentT = 0;\r\n        var getNextPathSegment = function () {\r\n            currentT = 0;\r\n            var pathData = that.dataArray;\r\n            for (var j = pIndex + 1; j < pathData.length; j++) {\r\n                if (pathData[j].pathLength > 0) {\r\n                    pIndex = j;\r\n                    return pathData[j];\r\n                }\r\n                else if (pathData[j].command === 'M') {\r\n                    p0 = {\r\n                        x: pathData[j].points[0],\r\n                        y: pathData[j].points[1],\r\n                    };\r\n                }\r\n            }\r\n            return {};\r\n        };\r\n        var findSegmentToFitCharacter = function (c) {\r\n            var glyphWidth = that._getTextSize(c).width + letterSpacing;\r\n            if (c === ' ' && align === 'justify') {\r\n                glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;\r\n            }\r\n            var currLen = 0;\r\n            var attempts = 0;\r\n            p1 = undefined;\r\n            while (Math.abs(glyphWidth - currLen) / glyphWidth > 0.01 &&\r\n                attempts < 20) {\r\n                attempts++;\r\n                var cumulativePathLength = currLen;\r\n                while (pathCmd === undefined) {\r\n                    pathCmd = getNextPathSegment();\r\n                    if (pathCmd &&\r\n                        cumulativePathLength + pathCmd.pathLength < glyphWidth) {\r\n                        cumulativePathLength += pathCmd.pathLength;\r\n                        pathCmd = undefined;\r\n                    }\r\n                }\r\n                if (pathCmd === {} || p0 === undefined) {\r\n                    return undefined;\r\n                }\r\n                var needNewSegment = false;\r\n                switch (pathCmd.command) {\r\n                    case 'L':\r\n                        if (Path_1.Path.getLineLength(p0.x, p0.y, pathCmd.points[0], pathCmd.points[1]) > glyphWidth) {\r\n                            p1 = Path_1.Path.getPointOnLine(glyphWidth, p0.x, p0.y, pathCmd.points[0], pathCmd.points[1], p0.x, p0.y);\r\n                        }\r\n                        else {\r\n                            pathCmd = undefined;\r\n                        }\r\n                        break;\r\n                    case 'A':\r\n                        var start = pathCmd.points[4];\r\n                        var dTheta = pathCmd.points[5];\r\n                        var end = pathCmd.points[4] + dTheta;\r\n                        if (currentT === 0) {\r\n                            currentT = start + 0.00000001;\r\n                        }\r\n                        else if (glyphWidth > currLen) {\r\n                            currentT += ((Math.PI / 180.0) * dTheta) / Math.abs(dTheta);\r\n                        }\r\n                        else {\r\n                            currentT -= ((Math.PI / 360.0) * dTheta) / Math.abs(dTheta);\r\n                        }\r\n                        if ((dTheta < 0 && currentT < end) ||\r\n                            (dTheta >= 0 && currentT > end)) {\r\n                            currentT = end;\r\n                            needNewSegment = true;\r\n                        }\r\n                        p1 = Path_1.Path.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);\r\n                        break;\r\n                    case 'C':\r\n                        if (currentT === 0) {\r\n                            if (glyphWidth > pathCmd.pathLength) {\r\n                                currentT = 0.00000001;\r\n                            }\r\n                            else {\r\n                                currentT = glyphWidth / pathCmd.pathLength;\r\n                            }\r\n                        }\r\n                        else if (glyphWidth > currLen) {\r\n                            currentT += (glyphWidth - currLen) / pathCmd.pathLength / 2;\r\n                        }\r\n                        else {\r\n                            currentT = Math.max(currentT - (currLen - glyphWidth) / pathCmd.pathLength / 2, 0);\r\n                        }\r\n                        if (currentT > 1.0) {\r\n                            currentT = 1.0;\r\n                            needNewSegment = true;\r\n                        }\r\n                        p1 = Path_1.Path.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);\r\n                        break;\r\n                    case 'Q':\r\n                        if (currentT === 0) {\r\n                            currentT = glyphWidth / pathCmd.pathLength;\r\n                        }\r\n                        else if (glyphWidth > currLen) {\r\n                            currentT += (glyphWidth - currLen) / pathCmd.pathLength;\r\n                        }\r\n                        else {\r\n                            currentT -= (currLen - glyphWidth) / pathCmd.pathLength;\r\n                        }\r\n                        if (currentT > 1.0) {\r\n                            currentT = 1.0;\r\n                            needNewSegment = true;\r\n                        }\r\n                        p1 = Path_1.Path.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);\r\n                        break;\r\n                }\r\n                if (p1 !== undefined) {\r\n                    currLen = Path_1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);\r\n                }\r\n                if (needNewSegment) {\r\n                    needNewSegment = false;\r\n                    pathCmd = undefined;\r\n                }\r\n            }\r\n        };\r\n        var testChar = 'C';\r\n        var glyphWidth = that._getTextSize(testChar).width + letterSpacing;\r\n        var lettersInOffset = offset / glyphWidth - 1;\r\n        for (var k = 0; k < lettersInOffset; k++) {\r\n            findSegmentToFitCharacter(testChar);\r\n            if (p0 === undefined || p1 === undefined) {\r\n                break;\r\n            }\r\n            p0 = p1;\r\n        }\r\n        for (var i = 0; i < charArr.length; i++) {\r\n            findSegmentToFitCharacter(charArr[i]);\r\n            if (p0 === undefined || p1 === undefined) {\r\n                break;\r\n            }\r\n            var width = Path_1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);\r\n            var kern = 0;\r\n            if (kerningFunc) {\r\n                try {\r\n                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\r\n                }\r\n                catch (e) {\r\n                    kern = 0;\r\n                }\r\n            }\r\n            p0.x += kern;\r\n            p1.x += kern;\r\n            this.textWidth += kern;\r\n            var midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, p0.x, p0.y, p1.x, p1.y);\r\n            var rotation = Math.atan2(p1.y - p0.y, p1.x - p0.x);\r\n            this.glyphInfo.push({\r\n                transposeX: midpoint.x,\r\n                transposeY: midpoint.y,\r\n                text: charArr[i],\r\n                rotation: rotation,\r\n                p0: p0,\r\n                p1: p1,\r\n            });\r\n            p0 = p1;\r\n        }\r\n    };\r\n    TextPath.prototype.getSelfRect = function () {\r\n        if (!this.glyphInfo.length) {\r\n            return {\r\n                x: 0,\r\n                y: 0,\r\n                width: 0,\r\n                height: 0,\r\n            };\r\n        }\r\n        var points = [];\r\n        this.glyphInfo.forEach(function (info) {\r\n            points.push(info.p0.x);\r\n            points.push(info.p0.y);\r\n            points.push(info.p1.x);\r\n            points.push(info.p1.y);\r\n        });\r\n        var minX = points[0] || 0;\r\n        var maxX = points[0] || 0;\r\n        var minY = points[1] || 0;\r\n        var maxY = points[1] || 0;\r\n        var x, y;\r\n        for (var i = 0; i < points.length / 2; i++) {\r\n            x = points[i * 2];\r\n            y = points[i * 2 + 1];\r\n            minX = Math.min(minX, x);\r\n            maxX = Math.max(maxX, x);\r\n            minY = Math.min(minY, y);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        var fontSize = this.fontSize();\r\n        return {\r\n            x: minX - fontSize / 2,\r\n            y: minY - fontSize / 2,\r\n            width: maxX - minX + fontSize,\r\n            height: maxY - minY + fontSize,\r\n        };\r\n    };\r\n    return TextPath;\r\n}(Shape_1.Shape));\r\nexports.TextPath = TextPath;\r\nTextPath.prototype._fillFunc = _fillFunc;\r\nTextPath.prototype._strokeFunc = _strokeFunc;\r\nTextPath.prototype._fillFuncHit = _fillFunc;\r\nTextPath.prototype._strokeFuncHit = _strokeFunc;\r\nTextPath.prototype.className = 'TextPath';\r\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\r\nGlobal_1._registerNode(TextPath);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'data');\r\nFactory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\r\nFactory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'align', 'left');\r\nFactory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');\r\nFactory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);\r\nFactory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);\r\nUtil_1.Collection.mapMethods(TextPath);\r\n"},"lineCount":369}},"error":null,"hash":"a705ee32686950dd656b1b3cc19be59a","cacheData":{"env":{}}}