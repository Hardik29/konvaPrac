{"id":"node_modules/konva/lib/shapes/Text.js","dependencies":[{"name":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\package.json","includedInParent":true,"mtime":1617850830012},{"name":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\package.json","includedInParent":true,"mtime":1617850829950},{"name":"../Util","loc":{"line":17,"column":21},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Text.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Util.js"},{"name":"../Factory","loc":{"line":18,"column":24},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Text.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Factory.js"},{"name":"../Shape","loc":{"line":19,"column":22},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Text.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Shape.js"},{"name":"../Global","loc":{"line":22,"column":23},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Text.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Global.js"},{"name":"../Validators","loc":{"line":21,"column":27},"parent":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\shapes\\Text.js","resolved":"C:\\Users\\hardik\\Documents\\GitHub\\konvaPrac\\node_modules\\konva\\lib\\Validators.js"}],"generated":{"js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Text = exports.stringToArray = void 0;\r\nvar Util_1 = require(\"../Util\");\r\nvar Factory_1 = require(\"../Factory\");\r\nvar Shape_1 = require(\"../Shape\");\r\nvar Global_1 = require(\"../Global\");\r\nvar Validators_1 = require(\"../Validators\");\r\nvar Global_2 = require(\"../Global\");\r\nfunction stringToArray(string) {\r\n    return Array.from(string);\r\n}\r\nexports.stringToArray = stringToArray;\r\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\r\n    'fontFamily',\r\n    'fontSize',\r\n    'fontStyle',\r\n    'fontVariant',\r\n    'padding',\r\n    'align',\r\n    'verticalAlign',\r\n    'lineHeight',\r\n    'text',\r\n    'width',\r\n    'height',\r\n    'wrap',\r\n    'ellipsis',\r\n    'letterSpacing',\r\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\r\nfunction normalizeFontFamily(fontFamily) {\r\n    return fontFamily\r\n        .split(',')\r\n        .map(function (family) {\r\n        family = family.trim();\r\n        var hasSpace = family.indexOf(' ') >= 0;\r\n        var hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\r\n        if (hasSpace && !hasQuotes) {\r\n            family = \"\\\"\" + family + \"\\\"\";\r\n        }\r\n        return family;\r\n    })\r\n        .join(', ');\r\n}\r\nvar dummyContext;\r\nfunction getDummyContext() {\r\n    if (dummyContext) {\r\n        return dummyContext;\r\n    }\r\n    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\r\n    return dummyContext;\r\n}\r\nfunction _fillFunc(context) {\r\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\r\n}\r\nfunction _strokeFunc(context) {\r\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\r\n}\r\nfunction checkDefaultFill(config) {\r\n    config = config || {};\r\n    if (!config.fillLinearGradientColorStops &&\r\n        !config.fillRadialGradientColorStops &&\r\n        !config.fillPatternImage) {\r\n        config.fill = config.fill || 'black';\r\n    }\r\n    return config;\r\n}\r\nvar Text = (function (_super) {\r\n    __extends(Text, _super);\r\n    function Text(config) {\r\n        var _this = _super.call(this, checkDefaultFill(config)) || this;\r\n        _this._partialTextX = 0;\r\n        _this._partialTextY = 0;\r\n        for (var n = 0; n < attrChangeListLen; n++) {\r\n            _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);\r\n        }\r\n        _this._setTextData();\r\n        return _this;\r\n    }\r\n    Text.prototype._sceneFunc = function (context) {\r\n        var textArr = this.textArr, textArrLen = textArr.length;\r\n        if (!this.text()) {\r\n            return;\r\n        }\r\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\r\n        var translateY = 0;\r\n        var translateY = lineHeightPx / 2;\r\n        var lineTranslateX = 0;\r\n        var lineTranslateY = 0;\r\n        context.setAttr('font', this._getContextFont());\r\n        context.setAttr('textBaseline', MIDDLE);\r\n        context.setAttr('textAlign', LEFT);\r\n        if (verticalAlign === MIDDLE) {\r\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\r\n        }\r\n        else if (verticalAlign === BOTTOM) {\r\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\r\n        }\r\n        context.translate(padding, alignY + padding);\r\n        for (n = 0; n < textArrLen; n++) {\r\n            var lineTranslateX = 0;\r\n            var lineTranslateY = 0;\r\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;\r\n            context.save();\r\n            if (align === RIGHT) {\r\n                lineTranslateX += totalWidth - width - padding * 2;\r\n            }\r\n            else if (align === CENTER) {\r\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\r\n            }\r\n            if (shouldUnderline) {\r\n                context.save();\r\n                context.beginPath();\r\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\r\n                spacesNumber = text.split(' ').length - 1;\r\n                oneWord = spacesNumber === 0;\r\n                lineWidth =\r\n                    align === JUSTIFY && lastLine && !oneWord\r\n                        ? totalWidth - padding * 2\r\n                        : width;\r\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\r\n                context.lineWidth = fontSize / 15;\r\n                context.strokeStyle = fill;\r\n                context.stroke();\r\n                context.restore();\r\n            }\r\n            if (shouldLineThrough) {\r\n                context.save();\r\n                context.beginPath();\r\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\r\n                spacesNumber = text.split(' ').length - 1;\r\n                oneWord = spacesNumber === 0;\r\n                lineWidth =\r\n                    align === JUSTIFY && lastLine && !oneWord\r\n                        ? totalWidth - padding * 2\r\n                        : width;\r\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\r\n                context.lineWidth = fontSize / 15;\r\n                context.strokeStyle = fill;\r\n                context.stroke();\r\n                context.restore();\r\n            }\r\n            if (letterSpacing !== 0 || align === JUSTIFY) {\r\n                spacesNumber = text.split(' ').length - 1;\r\n                var array = stringToArray(text);\r\n                for (var li = 0; li < array.length; li++) {\r\n                    var letter = array[li];\r\n                    if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\r\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\r\n                    }\r\n                    this._partialTextX = lineTranslateX;\r\n                    this._partialTextY = translateY + lineTranslateY;\r\n                    this._partialText = letter;\r\n                    context.fillStrokeShape(this);\r\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\r\n                }\r\n            }\r\n            else {\r\n                this._partialTextX = lineTranslateX;\r\n                this._partialTextY = translateY + lineTranslateY;\r\n                this._partialText = text;\r\n                context.fillStrokeShape(this);\r\n            }\r\n            context.restore();\r\n            if (textArrLen > 1) {\r\n                translateY += lineHeightPx;\r\n            }\r\n        }\r\n    };\r\n    Text.prototype._hitFunc = function (context) {\r\n        var width = this.getWidth(), height = this.getHeight();\r\n        context.beginPath();\r\n        context.rect(0, 0, width, height);\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Text.prototype.setText = function (text) {\r\n        var str = Util_1.Util._isString(text)\r\n            ? text\r\n            : text === null || text === undefined\r\n                ? ''\r\n                : text + '';\r\n        this._setAttr(TEXT, str);\r\n        return this;\r\n    };\r\n    Text.prototype.getWidth = function () {\r\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\r\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\r\n    };\r\n    Text.prototype.getHeight = function () {\r\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\r\n        return isAuto\r\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\r\n                this.padding() * 2\r\n            : this.attrs.height;\r\n    };\r\n    Text.prototype.getTextWidth = function () {\r\n        return this.textWidth;\r\n    };\r\n    Text.prototype.getTextHeight = function () {\r\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\r\n        return this.textHeight;\r\n    };\r\n    Text.prototype.measureSize = function (text) {\r\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\r\n        _context.save();\r\n        _context.font = this._getContextFont();\r\n        metrics = _context.measureText(text);\r\n        _context.restore();\r\n        return {\r\n            width: metrics.width,\r\n            height: fontSize,\r\n        };\r\n    };\r\n    Text.prototype._getContextFont = function () {\r\n        if (Global_1.Konva.UA.isIE) {\r\n            return (this.fontStyle() +\r\n                SPACE +\r\n                this.fontSize() +\r\n                PX_SPACE +\r\n                this.fontFamily());\r\n        }\r\n        return (this.fontStyle() +\r\n            SPACE +\r\n            this.fontVariant() +\r\n            SPACE +\r\n            (this.fontSize() + PX_SPACE) +\r\n            normalizeFontFamily(this.fontFamily()));\r\n    };\r\n    Text.prototype._addTextLine = function (line) {\r\n        if (this.align() === JUSTIFY) {\r\n            line = line.trim();\r\n        }\r\n        var width = this._getTextWidth(line);\r\n        return this.textArr.push({ text: line, width: width });\r\n    };\r\n    Text.prototype._getTextWidth = function (text) {\r\n        var letterSpacing = this.letterSpacing();\r\n        var length = text.length;\r\n        return (getDummyContext().measureText(text).width +\r\n            (length ? letterSpacing * (length - 1) : 0));\r\n    };\r\n    Text.prototype._setTextData = function () {\r\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\r\n        this.textArr = [];\r\n        getDummyContext().font = this._getContextFont();\r\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\r\n        for (var i = 0, max = lines.length; i < max; ++i) {\r\n            var line = lines[i];\r\n            var lineWidth = this._getTextWidth(line);\r\n            if (fixedWidth && lineWidth > maxWidth) {\r\n                while (line.length > 0) {\r\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\r\n                    while (low < high) {\r\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\r\n                        if (substrWidth <= maxWidth) {\r\n                            low = mid + 1;\r\n                            match = substr;\r\n                            matchWidth = substrWidth;\r\n                        }\r\n                        else {\r\n                            high = mid;\r\n                        }\r\n                    }\r\n                    if (match) {\r\n                        if (wrapAtWord) {\r\n                            var wrapIndex;\r\n                            var nextChar = line[match.length];\r\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\r\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\r\n                                wrapIndex = match.length;\r\n                            }\r\n                            else {\r\n                                wrapIndex =\r\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\r\n                                        1;\r\n                            }\r\n                            if (wrapIndex > 0) {\r\n                                low = wrapIndex;\r\n                                match = match.slice(0, low);\r\n                                matchWidth = this._getTextWidth(match);\r\n                            }\r\n                        }\r\n                        match = match.trimRight();\r\n                        this._addTextLine(match);\r\n                        textWidth = Math.max(textWidth, matchWidth);\r\n                        currentHeightPx += lineHeightPx;\r\n                        if (!shouldWrap ||\r\n                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\r\n                            var lastLine = this.textArr[this.textArr.length - 1];\r\n                            if (lastLine) {\r\n                                if (shouldAddEllipsis) {\r\n                                    var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\r\n                                    if (!haveSpace) {\r\n                                        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\r\n                                    }\r\n                                    this.textArr.splice(this.textArr.length - 1, 1);\r\n                                    this._addTextLine(lastLine.text + ELLIPSIS);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        line = line.slice(low);\r\n                        line = line.trimLeft();\r\n                        if (line.length > 0) {\r\n                            lineWidth = this._getTextWidth(line);\r\n                            if (lineWidth <= maxWidth) {\r\n                                this._addTextLine(line);\r\n                                currentHeightPx += lineHeightPx;\r\n                                textWidth = Math.max(textWidth, lineWidth);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._addTextLine(line);\r\n                currentHeightPx += lineHeightPx;\r\n                textWidth = Math.max(textWidth, lineWidth);\r\n            }\r\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\r\n                break;\r\n            }\r\n        }\r\n        this.textHeight = fontSize;\r\n        this.textWidth = textWidth;\r\n    };\r\n    Text.prototype.getStrokeScaleEnabled = function () {\r\n        return true;\r\n    };\r\n    return Text;\r\n}(Shape_1.Shape));\r\nexports.Text = Text;\r\nText.prototype._fillFunc = _fillFunc;\r\nText.prototype._strokeFunc = _strokeFunc;\r\nText.prototype.className = TEXT_UPPER;\r\nText.prototype._attrsAffectingSize = [\r\n    'text',\r\n    'fontSize',\r\n    'padding',\r\n    'wrap',\r\n    'lineHeight',\r\n    'letterSpacing',\r\n];\r\nGlobal_2._registerNode(Text);\r\nFactory_1.Factory.overWriteSetter(Text, 'width', Validators_1.getNumberOrAutoValidator());\r\nFactory_1.Factory.overWriteSetter(Text, 'height', Validators_1.getNumberOrAutoValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\r\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\r\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\r\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\r\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\r\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\r\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, Validators_1.getBooleanValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'text', '', Validators_1.getStringValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\r\nUtil_1.Collection.mapMethods(Text);\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/konva/lib/shapes/Text.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}}],"sources":{"node_modules/konva/lib/shapes/Text.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Text = exports.stringToArray = void 0;\r\nvar Util_1 = require(\"../Util\");\r\nvar Factory_1 = require(\"../Factory\");\r\nvar Shape_1 = require(\"../Shape\");\r\nvar Global_1 = require(\"../Global\");\r\nvar Validators_1 = require(\"../Validators\");\r\nvar Global_2 = require(\"../Global\");\r\nfunction stringToArray(string) {\r\n    return Array.from(string);\r\n}\r\nexports.stringToArray = stringToArray;\r\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\r\n    'fontFamily',\r\n    'fontSize',\r\n    'fontStyle',\r\n    'fontVariant',\r\n    'padding',\r\n    'align',\r\n    'verticalAlign',\r\n    'lineHeight',\r\n    'text',\r\n    'width',\r\n    'height',\r\n    'wrap',\r\n    'ellipsis',\r\n    'letterSpacing',\r\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\r\nfunction normalizeFontFamily(fontFamily) {\r\n    return fontFamily\r\n        .split(',')\r\n        .map(function (family) {\r\n        family = family.trim();\r\n        var hasSpace = family.indexOf(' ') >= 0;\r\n        var hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\r\n        if (hasSpace && !hasQuotes) {\r\n            family = \"\\\"\" + family + \"\\\"\";\r\n        }\r\n        return family;\r\n    })\r\n        .join(', ');\r\n}\r\nvar dummyContext;\r\nfunction getDummyContext() {\r\n    if (dummyContext) {\r\n        return dummyContext;\r\n    }\r\n    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\r\n    return dummyContext;\r\n}\r\nfunction _fillFunc(context) {\r\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\r\n}\r\nfunction _strokeFunc(context) {\r\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\r\n}\r\nfunction checkDefaultFill(config) {\r\n    config = config || {};\r\n    if (!config.fillLinearGradientColorStops &&\r\n        !config.fillRadialGradientColorStops &&\r\n        !config.fillPatternImage) {\r\n        config.fill = config.fill || 'black';\r\n    }\r\n    return config;\r\n}\r\nvar Text = (function (_super) {\r\n    __extends(Text, _super);\r\n    function Text(config) {\r\n        var _this = _super.call(this, checkDefaultFill(config)) || this;\r\n        _this._partialTextX = 0;\r\n        _this._partialTextY = 0;\r\n        for (var n = 0; n < attrChangeListLen; n++) {\r\n            _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);\r\n        }\r\n        _this._setTextData();\r\n        return _this;\r\n    }\r\n    Text.prototype._sceneFunc = function (context) {\r\n        var textArr = this.textArr, textArrLen = textArr.length;\r\n        if (!this.text()) {\r\n            return;\r\n        }\r\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\r\n        var translateY = 0;\r\n        var translateY = lineHeightPx / 2;\r\n        var lineTranslateX = 0;\r\n        var lineTranslateY = 0;\r\n        context.setAttr('font', this._getContextFont());\r\n        context.setAttr('textBaseline', MIDDLE);\r\n        context.setAttr('textAlign', LEFT);\r\n        if (verticalAlign === MIDDLE) {\r\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\r\n        }\r\n        else if (verticalAlign === BOTTOM) {\r\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\r\n        }\r\n        context.translate(padding, alignY + padding);\r\n        for (n = 0; n < textArrLen; n++) {\r\n            var lineTranslateX = 0;\r\n            var lineTranslateY = 0;\r\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;\r\n            context.save();\r\n            if (align === RIGHT) {\r\n                lineTranslateX += totalWidth - width - padding * 2;\r\n            }\r\n            else if (align === CENTER) {\r\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\r\n            }\r\n            if (shouldUnderline) {\r\n                context.save();\r\n                context.beginPath();\r\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\r\n                spacesNumber = text.split(' ').length - 1;\r\n                oneWord = spacesNumber === 0;\r\n                lineWidth =\r\n                    align === JUSTIFY && lastLine && !oneWord\r\n                        ? totalWidth - padding * 2\r\n                        : width;\r\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\r\n                context.lineWidth = fontSize / 15;\r\n                context.strokeStyle = fill;\r\n                context.stroke();\r\n                context.restore();\r\n            }\r\n            if (shouldLineThrough) {\r\n                context.save();\r\n                context.beginPath();\r\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\r\n                spacesNumber = text.split(' ').length - 1;\r\n                oneWord = spacesNumber === 0;\r\n                lineWidth =\r\n                    align === JUSTIFY && lastLine && !oneWord\r\n                        ? totalWidth - padding * 2\r\n                        : width;\r\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\r\n                context.lineWidth = fontSize / 15;\r\n                context.strokeStyle = fill;\r\n                context.stroke();\r\n                context.restore();\r\n            }\r\n            if (letterSpacing !== 0 || align === JUSTIFY) {\r\n                spacesNumber = text.split(' ').length - 1;\r\n                var array = stringToArray(text);\r\n                for (var li = 0; li < array.length; li++) {\r\n                    var letter = array[li];\r\n                    if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\r\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\r\n                    }\r\n                    this._partialTextX = lineTranslateX;\r\n                    this._partialTextY = translateY + lineTranslateY;\r\n                    this._partialText = letter;\r\n                    context.fillStrokeShape(this);\r\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\r\n                }\r\n            }\r\n            else {\r\n                this._partialTextX = lineTranslateX;\r\n                this._partialTextY = translateY + lineTranslateY;\r\n                this._partialText = text;\r\n                context.fillStrokeShape(this);\r\n            }\r\n            context.restore();\r\n            if (textArrLen > 1) {\r\n                translateY += lineHeightPx;\r\n            }\r\n        }\r\n    };\r\n    Text.prototype._hitFunc = function (context) {\r\n        var width = this.getWidth(), height = this.getHeight();\r\n        context.beginPath();\r\n        context.rect(0, 0, width, height);\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Text.prototype.setText = function (text) {\r\n        var str = Util_1.Util._isString(text)\r\n            ? text\r\n            : text === null || text === undefined\r\n                ? ''\r\n                : text + '';\r\n        this._setAttr(TEXT, str);\r\n        return this;\r\n    };\r\n    Text.prototype.getWidth = function () {\r\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\r\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\r\n    };\r\n    Text.prototype.getHeight = function () {\r\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\r\n        return isAuto\r\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\r\n                this.padding() * 2\r\n            : this.attrs.height;\r\n    };\r\n    Text.prototype.getTextWidth = function () {\r\n        return this.textWidth;\r\n    };\r\n    Text.prototype.getTextHeight = function () {\r\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\r\n        return this.textHeight;\r\n    };\r\n    Text.prototype.measureSize = function (text) {\r\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\r\n        _context.save();\r\n        _context.font = this._getContextFont();\r\n        metrics = _context.measureText(text);\r\n        _context.restore();\r\n        return {\r\n            width: metrics.width,\r\n            height: fontSize,\r\n        };\r\n    };\r\n    Text.prototype._getContextFont = function () {\r\n        if (Global_1.Konva.UA.isIE) {\r\n            return (this.fontStyle() +\r\n                SPACE +\r\n                this.fontSize() +\r\n                PX_SPACE +\r\n                this.fontFamily());\r\n        }\r\n        return (this.fontStyle() +\r\n            SPACE +\r\n            this.fontVariant() +\r\n            SPACE +\r\n            (this.fontSize() + PX_SPACE) +\r\n            normalizeFontFamily(this.fontFamily()));\r\n    };\r\n    Text.prototype._addTextLine = function (line) {\r\n        if (this.align() === JUSTIFY) {\r\n            line = line.trim();\r\n        }\r\n        var width = this._getTextWidth(line);\r\n        return this.textArr.push({ text: line, width: width });\r\n    };\r\n    Text.prototype._getTextWidth = function (text) {\r\n        var letterSpacing = this.letterSpacing();\r\n        var length = text.length;\r\n        return (getDummyContext().measureText(text).width +\r\n            (length ? letterSpacing * (length - 1) : 0));\r\n    };\r\n    Text.prototype._setTextData = function () {\r\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\r\n        this.textArr = [];\r\n        getDummyContext().font = this._getContextFont();\r\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\r\n        for (var i = 0, max = lines.length; i < max; ++i) {\r\n            var line = lines[i];\r\n            var lineWidth = this._getTextWidth(line);\r\n            if (fixedWidth && lineWidth > maxWidth) {\r\n                while (line.length > 0) {\r\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\r\n                    while (low < high) {\r\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\r\n                        if (substrWidth <= maxWidth) {\r\n                            low = mid + 1;\r\n                            match = substr;\r\n                            matchWidth = substrWidth;\r\n                        }\r\n                        else {\r\n                            high = mid;\r\n                        }\r\n                    }\r\n                    if (match) {\r\n                        if (wrapAtWord) {\r\n                            var wrapIndex;\r\n                            var nextChar = line[match.length];\r\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\r\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\r\n                                wrapIndex = match.length;\r\n                            }\r\n                            else {\r\n                                wrapIndex =\r\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\r\n                                        1;\r\n                            }\r\n                            if (wrapIndex > 0) {\r\n                                low = wrapIndex;\r\n                                match = match.slice(0, low);\r\n                                matchWidth = this._getTextWidth(match);\r\n                            }\r\n                        }\r\n                        match = match.trimRight();\r\n                        this._addTextLine(match);\r\n                        textWidth = Math.max(textWidth, matchWidth);\r\n                        currentHeightPx += lineHeightPx;\r\n                        if (!shouldWrap ||\r\n                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\r\n                            var lastLine = this.textArr[this.textArr.length - 1];\r\n                            if (lastLine) {\r\n                                if (shouldAddEllipsis) {\r\n                                    var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\r\n                                    if (!haveSpace) {\r\n                                        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\r\n                                    }\r\n                                    this.textArr.splice(this.textArr.length - 1, 1);\r\n                                    this._addTextLine(lastLine.text + ELLIPSIS);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        line = line.slice(low);\r\n                        line = line.trimLeft();\r\n                        if (line.length > 0) {\r\n                            lineWidth = this._getTextWidth(line);\r\n                            if (lineWidth <= maxWidth) {\r\n                                this._addTextLine(line);\r\n                                currentHeightPx += lineHeightPx;\r\n                                textWidth = Math.max(textWidth, lineWidth);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._addTextLine(line);\r\n                currentHeightPx += lineHeightPx;\r\n                textWidth = Math.max(textWidth, lineWidth);\r\n            }\r\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\r\n                break;\r\n            }\r\n        }\r\n        this.textHeight = fontSize;\r\n        this.textWidth = textWidth;\r\n    };\r\n    Text.prototype.getStrokeScaleEnabled = function () {\r\n        return true;\r\n    };\r\n    return Text;\r\n}(Shape_1.Shape));\r\nexports.Text = Text;\r\nText.prototype._fillFunc = _fillFunc;\r\nText.prototype._strokeFunc = _strokeFunc;\r\nText.prototype.className = TEXT_UPPER;\r\nText.prototype._attrsAffectingSize = [\r\n    'text',\r\n    'fontSize',\r\n    'padding',\r\n    'wrap',\r\n    'lineHeight',\r\n    'letterSpacing',\r\n];\r\nGlobal_2._registerNode(Text);\r\nFactory_1.Factory.overWriteSetter(Text, 'width', Validators_1.getNumberOrAutoValidator());\r\nFactory_1.Factory.overWriteSetter(Text, 'height', Validators_1.getNumberOrAutoValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\r\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\r\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\r\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\r\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\r\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\r\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, Validators_1.getBooleanValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, Validators_1.getNumberValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'text', '', Validators_1.getStringValidator());\r\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\r\nUtil_1.Collection.mapMethods(Text);\r\n"},"lineCount":378}},"error":null,"hash":"ca2318bda0a5a0825167881f4f374d38","cacheData":{"env":{}}}